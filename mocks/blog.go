// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/zaker/anachrome-be/stores/blog"
	"sync"
)

// Ensure, that MockBlogStore does implement blog.BlogStore.
// If this is not the case, regenerate this file with moq.
var _ blog.BlogStore = &MockBlogStore{}

// MockBlogStore is a mock implementation of blog.BlogStore.
//
// 	func TestSomethingThatUsesBlogStore(t *testing.T) {
//
// 		// make and configure a mocked blog.BlogStore
// 		mockedBlogStore := &MockBlogStore{
// 			GetBlogPostFunc: func(contextMoqParam context.Context, s string) (blog.BlogPost, error) {
// 				panic("mock out the GetBlogPost method")
// 			},
// 			GetBlogPostsMetaFunc: func(contextMoqParam context.Context) ([]blog.BlogPostMeta, error) {
// 				panic("mock out the GetBlogPostsMeta method")
// 			},
// 		}
//
// 		// use mockedBlogStore in code that requires blog.BlogStore
// 		// and then make assertions.
//
// 	}
type MockBlogStore struct {
	// GetBlogPostFunc mocks the GetBlogPost method.
	GetBlogPostFunc func(contextMoqParam context.Context, s string) (blog.BlogPost, error)

	// GetBlogPostsMetaFunc mocks the GetBlogPostsMeta method.
	GetBlogPostsMetaFunc func(contextMoqParam context.Context) ([]blog.BlogPostMeta, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBlogPost holds details about calls to the GetBlogPost method.
		GetBlogPost []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// GetBlogPostsMeta holds details about calls to the GetBlogPostsMeta method.
		GetBlogPostsMeta []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockGetBlogPost      sync.RWMutex
	lockGetBlogPostsMeta sync.RWMutex
}

// GetBlogPost calls GetBlogPostFunc.
func (mock *MockBlogStore) GetBlogPost(contextMoqParam context.Context, s string) (blog.BlogPost, error) {
	if mock.GetBlogPostFunc == nil {
		panic("MockBlogStore.GetBlogPostFunc: method is nil but BlogStore.GetBlogPost was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockGetBlogPost.Lock()
	mock.calls.GetBlogPost = append(mock.calls.GetBlogPost, callInfo)
	mock.lockGetBlogPost.Unlock()
	return mock.GetBlogPostFunc(contextMoqParam, s)
}

// GetBlogPostCalls gets all the calls that were made to GetBlogPost.
// Check the length with:
//     len(mockedBlogStore.GetBlogPostCalls())
func (mock *MockBlogStore) GetBlogPostCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockGetBlogPost.RLock()
	calls = mock.calls.GetBlogPost
	mock.lockGetBlogPost.RUnlock()
	return calls
}

// GetBlogPostsMeta calls GetBlogPostsMetaFunc.
func (mock *MockBlogStore) GetBlogPostsMeta(contextMoqParam context.Context) ([]blog.BlogPostMeta, error) {
	if mock.GetBlogPostsMetaFunc == nil {
		panic("MockBlogStore.GetBlogPostsMetaFunc: method is nil but BlogStore.GetBlogPostsMeta was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetBlogPostsMeta.Lock()
	mock.calls.GetBlogPostsMeta = append(mock.calls.GetBlogPostsMeta, callInfo)
	mock.lockGetBlogPostsMeta.Unlock()
	return mock.GetBlogPostsMetaFunc(contextMoqParam)
}

// GetBlogPostsMetaCalls gets all the calls that were made to GetBlogPostsMeta.
// Check the length with:
//     len(mockedBlogStore.GetBlogPostsMetaCalls())
func (mock *MockBlogStore) GetBlogPostsMetaCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetBlogPostsMeta.RLock()
	calls = mock.calls.GetBlogPostsMeta
	mock.lockGetBlogPostsMeta.RUnlock()
	return calls
}
